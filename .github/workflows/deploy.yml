name: Deploy to EC2

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      # JDK Setting
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle Caching
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Create .env file
      - name: Create .env file
        run: |
          touch .env
          echo HOST=${{ secrets.HOST }} >> .env
          echo KEY=${{ secrets.KEY }} >> .env
          echo SPRING_DATABASE_HOST=${{ SPRING_DATABASE_HOST }} >> .env
          echo SPRING_DATABASE_SCHEMA=${{ SPRING_DATABASE_SCHEMA }} > .env
          echo SPRING_DATABASE_USERNAME=${{ SPRING_DATABASE_USERNAME }} > .env
          echo SPRING_DATABASE_PASSWORD=${{ SPRING_DATABASE_PASSWORD }} > .env
          echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} > .env
          echo DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }} > .env

      # Gradle Build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # TODO: dockerhub 이미지 추가
      # Image Tagging with Docker Meta
#      - name: Docker meta
#        id: docker_meta
#        uses: crazy-max/ghaction-docker-meta@v2
#        with:
#          images:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # DockerHub Login
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: mkdir -p /home/ubuntu/srv/ubuntu

      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          remote_path: /home/ubuntu/srv/ubuntu/
          remote_host: ${{ secrets.HOST }}
          remote_user: ubuntu
          remote_key: ${{ secrets.KEY }}

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            cd /home/ubuntu/srv/ubuntu
            sh ./deploy/scripts/docker-install.sh
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker rm $(sudo docker ps -a -q)
            sudo docker rmi $(sudo docker images -q)
            sudo docker-compose -f docker-compose.yml pull
            sudo docker-compose -f docker-compose.yml up --build -d
            sudo docker image prune -f