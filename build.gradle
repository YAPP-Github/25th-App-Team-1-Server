plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'org.sonarqube' version '6.0.1.5171'
}

group = 'co.yapp.orbit'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.10'
}

sonar {
	properties {
		property "sonar.projectKey", "YAPP-Github_25th-App-Team-1-BE"
		property "sonar.organization", "yapp-github"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.test.exclusions', '**/*Application*.java, **/*Controller*.java, **/config/**, **/dto/**, **/exception/**'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/index.xml'
	}
}

jacocoTestReport {
	dependsOn test  // test 종속성 추가

	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
		html.outputLocation.set(file(layout.buildDirectory.dir("reports/jacoco/index.html").get().asFile))
		xml.outputLocation.set(file(layout.buildDirectory.dir("reports/jacoco/index.xml").get().asFile))
		csv.outputLocation.set(file(layout.buildDirectory.dir("reports/jacoco/index.csv").get().asFile))
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [
					'**/*Application*',
					'**/*Controller*',
					'**/config/*',
					'**/dto/*',
					'**/exception/*',
			])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			failOnViolation = false  // TODO: 테스트 코드 추가 시 제거 (jacoco 세팅용)
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE' // 라인 커버리지 기준
				value = 'COVEREDRATIO'
				minimum = 0.50 // 최소 50% 이상 커버리지 필요
			}

			limit {
				counter = 'BRANCH' // 분기 커버리지 기준
				value = 'COVEREDRATIO'
				minimum = 0.50 // 최소 50% 이상 커버리지 필요
			}

			excludes = [
					'**.*Application*',
					'**.*Controller*',
					'**.config.*',
					'**.dto.*',
					'**.exception.*',
			]
		}
	}
}